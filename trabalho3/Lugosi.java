/* Generated By:JavaCC: Do not edit this line. Lugosi.java */
import java.io.*;
import java.util.HashMap;
import java.util.Map;

public class Lugosi implements LugosiConstants {
    private Ambiente ambiente;

    public Lugosi(InputStream inputStream) {
        // Inicializa o ambiente
        this.ambiente = new Ambiente();
        // Inicializa o parser
        ReInit(new SimpleCharStream(new InputStreamReader(inputStream)));
    }

    public static void main(String args[]) throws ParseException, IOException {
        Lugosi analisador = new Lugosi(new FileInputStream(args[0]));
        try {
            analisador.Programa();
            System.out.println("Programa analisado e executado com sucesso.");
        } catch (ParseException e) {
            System.out.println("Erro de parsing: " + e.getMessage());
        }
    }

// ------------------ Regras da Linguagem ------------------

// PROGRAMA -> "void" "main" "{" COMANDOS "}"
  static final public void Programa() throws ParseException {
    jj_consume_token(VOID);
    jj_consume_token(MAIN);
    jj_consume_token(ACHAVES);
    Comandos();
    jj_consume_token(FCHAVES);
    jj_consume_token(0);
  }

// COMANDOS -> COM ";" COMANDOS'
  static final public void Comandos() throws ParseException {
    Com();
    jj_consume_token(PONTOVIRGULA);
    ComandosL();
  }

// COMANDOS' -> COM ";" COMANDOS' | ε
  static final public void ComandosL() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LET:
    case PRINTIO:
    case ID:
      Com();
      jj_consume_token(PONTOVIRGULA);
      ComandosL();
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
  }

// COM -> DECLARACAO | ATRIBUICAO | PRINT
  static final public void Com() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LET:
      Declaracao();
      break;
    case ID:
      Atribuicao();
      break;
    case PRINTIO:
      Print();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// DECLARACAO -> "let" ("float" | "bool") ID
  static final public void Declaracao() throws ParseException {
    String tipo, nome;
    jj_consume_token(LET);
    tipo = Tipo();
    nome = jj_consume_token(ID);
        ambiente.declararVariavel(nome, tipo);
  }

  static final public String Tipo() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FLOAT:
      t = jj_consume_token(FLOAT);
                  {if (true) return t.image;}
      break;
    case BOOL:
      t = jj_consume_token(BOOL);
                 {if (true) return t.image;}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// ATRIBUICAO -> ID ":=" EXP
  static final public void Atribuicao() throws ParseException {
    String nome;
    Object valor;
    nome = jj_consume_token(ID);
    jj_consume_token(ATRIBUICAO);
    valor = Exp();
        ambiente.atribuirValor(nome, valor);
  }

// PRINT -> "printIO" "(" EXP ")" | "printIO" ID
  static final public void Print() throws ParseException {
    Object valor;
    jj_consume_token(PRINTIO);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case APAREN:
      jj_consume_token(APAREN);
      valor = Exp();
      jj_consume_token(FPAREN);
      break;
    case ID:
      valor = jj_consume_token(ID);
        System.out.println(valor);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// EXPRESSÃO -> TERMO EXP'
  static final public Object Exp() throws ParseException {
    Object valor;
    valor = Termo();
                      {if (true) return valor;}
    throw new Error("Missing return statement in function");
  }

// EXP' -> ("+" | "-") TERMO EXP' | ε
  static final public Object ExpL() throws ParseException {
    Object valor;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      valor = Termo();
      ExpL();
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
  }

// TERMO -> FATOR TERMO'
  static final public Object Termo() throws ParseException {
    Object valor;
    valor = Fator();
                      {if (true) return valor;}
    throw new Error("Missing return statement in function");
  }

// TERMO' -> ("*" | "/") FATOR TERMO' | ε
  static final public Object TermoL() throws ParseException {
    Object valor;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MULT:
    case DIV:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULT:
        jj_consume_token(MULT);
        break;
      case DIV:
        jj_consume_token(DIV);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      valor = Fator();
      TermoL();
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
  }

// FATOR -> NUM | ID | "(" EXP ")"
  static final public Object Fator() throws ParseException {
    Object valor;
    String nome;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM:
      valor = jj_consume_token(NUM);
                    {if (true) return Double.parseDouble(valor.image);}
      break;
    case ID:
      nome = jj_consume_token(ID);
                  {if (true) return ambiente.obterValor(nome);}
      break;
    case APAREN:
      jj_consume_token(APAREN);
      valor = Exp();
      jj_consume_token(FPAREN);
                                      {if (true) return valor;}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public LugosiTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[9];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x2080,0x2080,0x300,0x40000000,0x180000,0x180000,0x600000,0x600000,0x40000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x10,0x10,0x0,0x10,0x0,0x0,0x0,0x0,0x18,};
   }

  /** Constructor with InputStream. */
  public Lugosi(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Lugosi(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new LugosiTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Lugosi(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new LugosiTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Lugosi(LugosiTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(LugosiTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[37];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 9; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 37; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
