PARSER_BEGIN(Lugosi)

import java.io.*;
public class Lugosi {
  public static void main(String args[]) throws ParseException, IOException {
    Lugosi analisador = new Lugosi(new FileInputStream(args[0]));
    try {
      analisador.Programa();
      System.out.println("Programa analisado com sucesso.");
    } catch (ParseException e) {
      System.out.println("Erro de parsing: " + e.getMessage());
    }
  }
}

PARSER_END(Lugosi)

// Ignorar espaços, tabulações e quebras de linha
SKIP :
{
  " " | "\t" | "\n" | "\r"
}

// ----------------- Definição de Tokens -----------------
TOKEN :
{
  // Palavras reservadas
  <VOID: "void"> |
  <MAIN: "main"> |
  <LET: "let"> |
  <FLOAT: "float"> |
  <BOOL: "bool"> |
  <TRUE: "true"> |
  <FALSE: "false"> |
  <RETURN: "return"> |
  <PRINTIO: "printIO"> |
  <READIO: "readIO"> |
  <IF: "if"> |
  <WHILE: "while"> |
  <DO: "do"> |
  <DEF: "def"> |

  // Operadores
  <PLUS: "+"> |
  <MINUS: "-"> |
  <MULT: "*"> |
  <DIV: "/"> |
  <AND: "&&"> |
  <OR: "||"> |
  <LT: "<"> |
  <GT: ">"> |
  <EQ: "=="> |

  // Símbolos
  <ACHAVES: "{"> |
  <FCHAVES: "}"> |
  <APAREN: "("> |
  <FPAREN: ")"> |
  <VIRGULA: ","> |
  <PONTOVIRGULA: ";"> |
  <ATRIBUICAO: ":="> |

  // Literais
  <NUM: (["0"-"9"])+("."(["0"-"9"])+)? > | // Número inteiro ou decimal
  <ID: ["a"-"z", "A"-"Z"] (["a"-"z", "A"-"Z", "0"-"9"])* > // Identificadores
}

// ------------------ Regras da Linguagem ------------------

// PROGRAMA -> "void" "main" "{" COMANDOS "}"
void Programa() :
{}
{
  <VOID> <MAIN> <ACHAVES> Comandos() <FCHAVES> <EOF>
}

// COMANDOS -> COM ";" COMANDOS'
void Comandos() :
{}
{
  Com() <PONTOVIRGULA> ComandosL()
}

// COMANDOS' -> COM ";" COMANDOS' | ε
void ComandosL() :
{}
{
  (Com() <PONTOVIRGULA> ComandosL())?
}

// COM -> DECLARACAO | ATRIBUICAO | PRINT
void Com() :
{}
{
  Declaracao() | Atribuicao() | Print()
}

// DECLARACAO -> "let" ("float" | "bool") ID
void Declaracao() :
{}
{
  <LET> ( <FLOAT> | <BOOL> ) <ID>
}

// ATRIBUICAO -> ID ":=" EXP
void Atribuicao() :
{}
{
  <ID> <ATRIBUICAO> Exp()
}

// PRINT -> "printIO" "(" EXP ")" | "printIO" ID
void Print() :
{}
{
  <PRINTIO> ( <APAREN> Exp() <FPAREN> | <ID> )
}

// EXPRESSÃO -> TERMO EXP'
void Exp() :
{}
{
  Termo() ExpL()
}

// EXP' -> ("+" | "-") TERMO EXP' | ε
void ExpL() :
{}
{
  ( ( <PLUS> | <MINUS> ) Termo() ExpL() )?
}

// TERMO -> FATOR TERMO'
void Termo() :
{}
{
  Fator() TermoL()
}

// TERMO' -> ("*" | "/") FATOR TERMO' | ε
void TermoL() :
{}
{
  ( ( <MULT> | <DIV> ) Fator() TermoL() )?
}

// FATOR -> NUM | ID | "(" EXP ")"
void Fator() :
{}
{
  <NUM> | <ID> | ( <APAREN> Exp() <FPAREN> )
}