options {
    OUTPUT_DIRECTORY = "libs";
}

PARSER_BEGIN(Lugosi)

package libs;

import ast.*;
import java.io.*;
import java.util.*;

public class Lugosi {
  public static void main(String args[]) throws Exception{
  // abrir o arquivo passado por linha
  // de comando contento o código em Lugosi:

  FileInputStream fs = new FileInputStream(new File(args[0]));

  // Instanciar o parser da linguagem Lugosi passando
  // como argumento o arquivo contendo o código
  //Lugosi a ser processado:

  Lugosi parser = new Lugosi(fs);

  // Chamar a primeira regra do parser que irá
  // analisar o código e devolver a árvore sintática

  Prog arvore = parser.Lugosi();

  // passar a árvore para o gerador de código
  // que deve gerar um arquivo com com o código
  // alvo na linguagem escolhida:
  
  geraCodigo(arvore, args[0])
  }
}

PARSER_END(Lugosi)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN : {
    // Palavras reservadas
    <VOID: "void">        | <MAIN: "main">      | <LET: "let">         |
    <INT: "int">          | <FLOAT: "float">    | <BOOL: "bool">       |
    <TRUE: "true">        | <FALSE: "false">    | <RETURN: "return">   |
    <PRINTIO: "printIO">  | <READIO: "readIO">  | <IF: "if">           |
    <WHILE: "while">      | <DO: "do">          | <DEF: "def">         |
  
    // Operadores
    <PLUS: "+">           | <MINUS: "-">        | <MULT: "*">          |
    <DIV: "/">            | <AND: "&&">         | <OR: "||">           |
    <LT: "<">             | <GT: ">">          | <EQ: "==">           |
    <LEQ: "<=">           | <GEQ: ">=">         |
  
    // Símbolos
    <ACHAVES: "{">        | <FCHAVES: "}">      | <APAREN: "(">        |
    <FPAREN: ")">         | <VIRGULA: ",">      | <PONTOVIRGULA: ";">  |
    <ATRIBUICAO: ":=">    |
  
    // Literais
    <NUM: (["0"-"9"])+ ("." (["0"-"9"])+)? >    |
    <ID: ["a"-"z", "A"-"Z"] (["a"-"z", "A"-"Z", "0"-"9"])* >
  }

Prog Lugosi() :
{Main main; ArrayList<Fun> fun = new ArrayList<Fun>();}
{
    main = Main() 
    fun = Fun()

    {return new Prog(main, fun);}
}


Main Main() :
{ArrayList<VarDecl> vars = new ArrayList<VarDecl>(); ArrayList<Comando> coms = new ArrayList<Comando>();}
{
    <VOID> <MAIN> <ACHAVES>
    vars = VarDecl() 
    coms = SeqComandos()    
    <FCHAVES>

    {return new Main(vars, coms);}
}


ArrayList<VarDecl> VarDecl() :
{ ArrayList<VarDecl> vars = new ArrayList<VarDecl>(); String type; String var; }
{
    (<LET> type = Tipo() var = <ID>.image <PONTOVIRGULA> { vars.add(new VarDecl(type, var)); })*
    { return vars; }
}


String Tipo() :
{Token token;}
{
    token = <FLOAT> {return token.image;}
    | token = <BOOL> {return token.image;}
    | token = <VOID> {return token.image;}
    | token = <INT> {return token.image;}
}

ArrayList<Comando> SeqComandos() :
{ArrayList<Comando> coms = new ArrayList<Comando>(); Comando com; ArrayList<Comando> moreComs;}
{
    (com = Comando() {coms.add(com); moreComs = SeqComandos(); coms.addAll(moreComs);})?

    {return coms;}
}


Exp Fator() :
{ Token token; ArrayList<Exp> args; }
{
    token = <ID> 
    (
        <APAREN> args = ListaExpressao() <FPAREN> { return new EChamadaFun(token.image, args); }
        | { return new EVar(token.image); }
    )
    | token = <NUM> { return new EFloat(Float.parseFloat(token.image)); }
    | <TRUE> { return new ETrue(); }
    | <FALSE> { return new EFalse(); }
}

String OP():
{ Token token; }
{
    ( token=<PLUS> 
    | token=<MINUS> 
    | token=<MULT> 
    | token=<DIV> 
    | token=<AND> 
    | token=<OR> 
    | token=<LT> 
    | token=<GT> 
    | token=<EQ> 
    | token=<LEQ>
    | token=<GEQ>)

    { return token.image; }
}

ArrayList<Exp> ListaExpressao() :
{ArrayList<Exp> exps = new ArrayList<Exp>(); Exp e;}
{
    e = EXP() {exps.add(e);} (<VIRGULA> e = EXP() {exps.add(e);})*
    
    {return exps;}
}



ArrayList<Fun> Fun() :
{ArrayList<Fun> fun = new ArrayList<Fun>(); String nome; ArrayList<ParamFormalFun> params;String retorno; ArrayList<VarDecl> vars;ArrayList<Comando> body;}
{
    (<DEF> retorno = Tipo() nome = <ID>.image "(" params = ListaArg() ")" "{" vars = VarDecl() body = SeqComandos() "}" {fun.add(new Fun(nome, params, retorno, vars, body));})*
    
    {return fun;}
}


ArrayList<ParamFormalFun> ListaArg() :
{ArrayList<ParamFormalFun> params = new ArrayList<ParamFormalFun>(); String type; String var;}
{
    type = Tipo() var = <ID>.image {params.add(new ParamFormalFun(type, var));} ("," type = Tipo() var = <ID>.image {params.add(new ParamFormalFun(type, var));})*
    
    {return params;}
}



Exp EXP() :
{Exp arg1; String op; Exp arg2; Exp fator;}
{
    "(" arg1 = EXP() op = OP() arg2 = EXP() ")" {return new EOpExp(op, arg1, arg2);}
    | fator = Fator() {return fator;}
}

Comando Comando() :
{Token token; Exp exp; ArrayList<Comando> coms = new ArrayList<Comando>(); ArrayList<Exp> args;}
{
    LOOKAHEAD(3) token = <ID> <ATRIBUICAO> exp = EXP() <PONTOVIRGULA> {return new CAtribuicao(token.beginLine, token.image, exp);}
    | LOOKAHEAD(2) token = <ID> <APAREN> args = ListaExpressao() <FPAREN> <PONTOVIRGULA> {return new CChamadaFun(token.beginLine, token.image, args);}
    | token = <IF> exp = EXP() <ACHAVES> coms = SeqComandos() <FCHAVES> <PONTOVIRGULA> {return new CIf(token.beginLine, exp, coms);}
    | token = <WHILE> exp = EXP() <DO> <ACHAVES> coms = SeqComandos() <FCHAVES> <PONTOVIRGULA> {return new CWhile(token.beginLine, exp, coms);}
    | LOOKAHEAD(3) token = <ID> <ATRIBUICAO> <READIO> <APAREN> <FPAREN> {return new CReadInput(token.beginLine, token.image);}
    | token = <RETURN> exp = EXP() <PONTOVIRGULA> {return new CReturn(token.beginLine, exp);}
    | token = <PRINTIO> exp = EXP() <PONTOVIRGULA> {return new CPrint(token.beginLine, exp);}
}
