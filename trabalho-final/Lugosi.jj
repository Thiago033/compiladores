PARSER_BEGIN(Lugosi)

import java.io.*;
import java.util.ArrayList;
import ast.*;

public class Lugosi {

    public static void main(String args[]) throws Exception {
        try {
            FileInputStream fs = new FileInputStream(new File(args[0]));
            Lugosi parser = new Lugosi(fs);
            Prog arvore = parser.Lugosi();
            System.out.println("Parsing completed successfully!");
            geraCodigo(arvore, args[0]);
        } catch (ParseException e) {
            System.out.println("Parsing error: " + e.getMessage());
        }
    }

    public static void geraCodigo(Prog prog, String arquivo) {
        System.out.println("AST: " + prog);
    }
}

PARSER_END(Lugosi)

SKIP :
{
  " " | "\t" | "\n" | "\r"
}

TOKEN :
{
  // Palavras reservadas
  <VOID: "void"> |
  <MAIN: "main"> |
  <LET: "let"> |
  <INT: "int"> |
  <FLOAT: "float"> |
  <BOOL: "bool"> |
  <TRUE: "true"> |
  <FALSE: "false"> |
  <RETURN: "return"> |
  <PRINTIO: "printIO"> |
  <READIO: "readIO"> |
  <IF: "if"> |
  <WHILE: "while"> |
  <DO: "do"> |
  <DEF: "def"> |

  // Operadores
  <PLUS: "+"> |
  <MINUS: "-"> |
  <MULT: "*"> |
  <DIV: "/"> |
  <AND: "&&"> |
  <OR: "||"> |
  <LT: "<"> |
  <GT: ">"> |
  <EQ: "=="> |

  // SÃ­mbolos
  <ACHAVES: "{"> |
  <FCHAVES: "}"> |
  <APAREN: "("> |
  <FPAREN: ")"> |
  <VIRGULA: ","> |
  <PONTOVIRGULA: ";"> |
  <ATRIBUICAO: ":="> |

  // Literais
  <NUM: (["0"-"9"])+("."(["0"-"9"])+)? > |
  <ID: ["a"-"z", "A"-"Z"] (["a"-"z", "A"-"Z", "0"-"9"])* >
}

Prog Lugosi():
{ Main main; ArrayList<Fun> funs = new ArrayList<Fun>(); Fun fun; }
{
    main=Main() (fun=Funcao() { funs.add(fun); })*
    { return new Prog(main, funs); }
}

Main Main():
{ 
    ArrayList<VarDecl> vars = new ArrayList<VarDecl>(); 
    ArrayList<Comando> coms = new ArrayList<Comando>(); 
}
{
    <VOID> <MAIN> <ACHAVES> vars=VarDecl() coms=SeqComandos() <FCHAVES>
    { return new Main(vars, coms); }
}

ArrayList<VarDecl> VarDecl():
{ ArrayList<VarDecl> vars = new ArrayList<VarDecl>(); String tipo; Token id; }
{
    ( <LET> tipo=Tipo() id=<ID> <PONTOVIRGULA> { vars.add(new VarDecl(tipo, id.image)); } )*
    { return vars; }
}

String Tipo():
{}
{
    <FLOAT> { return "float"; } |
    <BOOL> { return "bool"; } |
    <VOID> { return "void"; } |
    <INT> { return "int"; }
}

ArrayList<Comando> SeqComandos():
{ ArrayList<Comando> comandos = new ArrayList<Comando>(); Comando cmd; }
{
    (cmd=Comando() { comandos.add(cmd); })*
    { return comandos; }
}

Comando Comando():
{ Exp exp; Token id; ArrayList<Comando> bloco = new ArrayList<Comando>(); }
{
    (id=<ID> exp=ComandoTokenID() { return new CAtribuicao(id.beginLine, id.image, exp); }) |
    (<IF> exp=Expressao() <ACHAVES> bloco=SeqComandos() <FCHAVES> <PONTOVIRGULA> { return new CIf(getToken(1).beginLine, exp, bloco); }) |
    (<WHILE> exp=Expressao() <DO> <ACHAVES> bloco=SeqComandos() <FCHAVES> <PONTOVIRGULA> { return new CWhile(getToken(1).beginLine, exp, bloco); }) |
    (<RETURN> exp=Expressao() <PONTOVIRGULA> { return new CReturn(getToken(1).beginLine, exp); }) |
    (<PRINTIO> exp=Expressao() <PONTOVIRGULA> { return new CPrint(getToken(1).beginLine, exp); })
}

Exp ComandoTokenID():
{ Exp exp = null; ArrayList<Exp> args = new ArrayList<Exp>(); }
{
    <ATRIBUICAO> exp=Expressao() <PONTOVIRGULA> { return exp; } |
    <APAREN> (args=ListaExpressao())? <FPAREN> <PONTOVIRGULA> { return null; }
}

Exp Expressao():
{ Exp arg1, arg2; String op; }
{
    arg1=Termo() (op=OP() arg2=Termo() { return new EOpExp(op, arg1, arg2); })*
    { return arg1; }
}

String OP():
{ Token token; }
{
    ( token=<PLUS> | token=<MINUS> | token=<MULT> | token=<DIV> | 
      token=<AND> | token=<OR> | token=<LT> | token=<GT> | token=<EQ> )
    { return token.image; }
}

Exp Termo():
{ Exp exp; }
{
    <APAREN> exp=Expressao() <FPAREN> { return exp; } |
    exp=Fator() { return exp; }
}

Exp Fator():
{ Token num; Token id; }
{
    num=<NUM> { return new EFloat(Float.parseFloat(num.image)); } |
    id=<ID> { return new EVar(id.image); } |
    <TRUE> { return new ETrue(); } |
    <FALSE> { return new EFalse(); }
}

ArrayList<Exp> ListaExpressao():
{ ArrayList<Exp> exps = new ArrayList<Exp>(); Exp exp; }
{
    exp=Expressao() { exps.add(exp); }
    (<VIRGULA> exp=Expressao() { exps.add(exp); })*
    { return exps; }
}

Fun Funcao():
{
    Token id;
    String tipo;
    ArrayList<ParamFormalFun> params = new ArrayList<ParamFormalFun>();
    ArrayList<VarDecl> vars = new ArrayList<VarDecl>();
    ArrayList<Comando> body = new ArrayList<Comando>();
}
{
    <DEF> tipo=Tipo() id=<ID> <APAREN> (params=ListaArg())? <FPAREN> 
    <ACHAVES> vars=VarDecl() body=SeqComandos() <FCHAVES> 
    { return new Fun(id.image, params, tipo, vars, body); }
}

ArrayList<ParamFormalFun> ListaArg():
{ ArrayList<ParamFormalFun> args = new ArrayList<ParamFormalFun>(); String tipo; Token id; }
{
    tipo=Tipo() id=<ID> { args.add(new ParamFormalFun(tipo, id.image)); }
    (<VIRGULA> tipo=Tipo() id=<ID> { args.add(new ParamFormalFun(tipo, id.image)); })*
    { return args; }
}