/* Generated By:JavaCC: Do not edit this line. Lugosi.java */
package libs;

import ast.*;
import java.io.*;
import java.util.*;

public class Lugosi implements LugosiConstants {
  public static void main(String args[]) throws Exception{
  // abrir o arquivo passado por linha
  // de comando contento o código em Lugosi:

  FileInputStream fs = new FileInputStream(new File(args[0]));

  // Instanciar o parser da linguagem Lugosi passando
  // como argumento o arquivo contendo o código
  //Lugosi a ser processado:

  Lugosi parser = new Lugosi(fs);

  // Chamar a primeira regra do parser que irá
  // analisar o código e devolver a árvore sintática

  Prog arvore = parser.Lugosi();

  // passar a árvore para o gerador de código
  // que deve gerar um arquivo com com o código
  // alvo na linguagem escolhida:

  GeraCodigo.gerar(arvore);
  }

  static final public Prog Lugosi() throws ParseException {
 Main main; ArrayList<Fun> fun = new ArrayList<Fun>();
    main = Main();
    fun = Fun();
     {if (true) return new Prog(main, fun);}
    throw new Error("Missing return statement in function");
  }

  static final public Main Main() throws ParseException {
 ArrayList<VarDecl> vars = new ArrayList<VarDecl>(); ArrayList<Comando> coms = new ArrayList<Comando>();
    jj_consume_token(VOID);
    jj_consume_token(MAIN);
    jj_consume_token(ACHAVES);
    vars = VarDecl();
    coms = SeqComandos();
    jj_consume_token(FCHAVES);
     {if (true) return new Main(vars, coms);}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList<VarDecl> VarDecl() throws ParseException {
 ArrayList<VarDecl> vars = new ArrayList<VarDecl>(); String type; String var; ArrayList<VarDecl> moreVars;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LET:
      jj_consume_token(LET);
      type = Tipo();
      var = jj_consume_token(ID).image;
      jj_consume_token(PONTOVIRGULA);
                                                          vars.add(new VarDecl(type, var)); moreVars = VarDecl(); vars.addAll(moreVars);
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
     {if (true) return vars;}
    throw new Error("Missing return statement in function");
  }

  static final public String Tipo() throws ParseException {
 Token token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FLOAT:
      token = jj_consume_token(FLOAT);
                     {if (true) return token.image;}
      break;
    case BOOL:
      token = jj_consume_token(BOOL);
                      {if (true) return token.image;}
      break;
    case VOID:
      token = jj_consume_token(VOID);
                      {if (true) return token.image;}
      break;
    case INT:
      token = jj_consume_token(INT);
                     {if (true) return token.image;}
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList<Comando> SeqComandos() throws ParseException {
 ArrayList<Comando> coms = new ArrayList<Comando>(); Comando com; ArrayList<Comando> moreComs;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RETURN:
    case PRINTIO:
    case IF:
    case WHILE:
    case ID:
      com = Comando();
                      coms.add(com); moreComs = SeqComandos(); coms.addAll(moreComs);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
     {if (true) return coms;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp Fator() throws ParseException {
 Token token; ArrayList<Exp> args; String fun;
    if (jj_2_1(2)) {
      token = jj_consume_token(ID);
      jj_consume_token(APAREN);
      args = ListaExpressao();
      jj_consume_token(FPAREN);
                                                                         {if (true) return new EChamadaFun(token.image, args);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        token = jj_consume_token(ID);
                    {if (true) return new EVar(token.image);}
        break;
      case NUM:
        token = jj_consume_token(NUM);
                     {if (true) return new EFloat(Float.parseFloat(token.image));}
        break;
      case TRUE:
        jj_consume_token(TRUE);
              {if (true) return new ETrue();}
        break;
      case FALSE:
        jj_consume_token(FALSE);
               {if (true) return new EFalse();}
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String OP() throws ParseException {
  Token token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      token = jj_consume_token(PLUS);
      break;
    case MINUS:
      token = jj_consume_token(MINUS);
      break;
    case MULT:
      token = jj_consume_token(MULT);
      break;
    case DIV:
      token = jj_consume_token(DIV);
      break;
    case AND:
      token = jj_consume_token(AND);
      break;
    case OR:
      token = jj_consume_token(OR);
      break;
    case LT:
      token = jj_consume_token(LT);
      break;
    case GT:
      token = jj_consume_token(GT);
      break;
    case EQ:
      token = jj_consume_token(EQ);
      break;
    case LEQ:
      token = jj_consume_token(LEQ);
      break;
    case GEQ:
      token = jj_consume_token(GEQ);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return token.image;}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList<Exp> ListaExpressao() throws ParseException {
 ArrayList<Exp> exps = new ArrayList<Exp>(); Exp e;
    e = EXP();
               exps.add(e);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRGULA:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_1;
      }
      jj_consume_token(VIRGULA);
      e = EXP();
                                                   exps.add(e);
    }
     {if (true) return exps;}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList<Fun> Fun() throws ParseException {
 ArrayList<Fun> fun = new ArrayList<Fun>(); String nome; ArrayList<ParamFormalFun> params;String retorno; ArrayList<VarDecl> vars;ArrayList<Comando> body;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DEF:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_2;
      }
      jj_consume_token(DEF);
      retorno = Tipo();
      nome = jj_consume_token(ID).image;
      jj_consume_token(APAREN);
      params = ListaArg();
      jj_consume_token(FPAREN);
      jj_consume_token(ACHAVES);
      vars = VarDecl();
      body = SeqComandos();
      jj_consume_token(FCHAVES);
                                                                                                                         fun.add(new Fun(nome, params, retorno, vars, body));
    }
     {if (true) return fun;}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList<ParamFormalFun> ListaArg() throws ParseException {
 ArrayList<ParamFormalFun> params = new ArrayList<ParamFormalFun>(); String type; String var;
    type = Tipo();
    var = jj_consume_token(ID).image;
                                    params.add(new ParamFormalFun(type, var));
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRGULA:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_3;
      }
      jj_consume_token(VIRGULA);
      type = Tipo();
      var = jj_consume_token(ID).image;
                                                                                                                     params.add(new ParamFormalFun(type, var));
    }
     {if (true) return params;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp EXP() throws ParseException {
 Exp arg1; String op; Exp arg2; Exp fator;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case APAREN:
      jj_consume_token(APAREN);
      arg1 = EXP();
      op = OP();
      arg2 = EXP();
      jj_consume_token(FPAREN);
                                                 {if (true) return new EOpExp(op, arg1, arg2);}
      break;
    case TRUE:
    case FALSE:
    case NUM:
    case ID:
      fator = Fator();
                       {if (true) return fator;}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Comando Comando() throws ParseException {
 Token token; Exp exp; ArrayList<Comando> coms = new ArrayList<Comando>(); ArrayList<Exp> args;
    if (jj_2_2(3)) {
      token = jj_consume_token(ID);
      jj_consume_token(ATRIBUICAO);
      exp = EXP();
      jj_consume_token(PONTOVIRGULA);
                                                                       {if (true) return new CAtribuicao(token.beginLine, token.image, exp);}
    } else if (jj_2_3(2)) {
      token = jj_consume_token(ID);
      jj_consume_token(APAREN);
      args = ListaExpressao();
      jj_consume_token(FPAREN);
      jj_consume_token(PONTOVIRGULA);
                                                                                          {if (true) return new CChamadaFun(token.beginLine, token.image, args);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
        token = jj_consume_token(IF);
        exp = EXP();
        jj_consume_token(ACHAVES);
        coms = SeqComandos();
        jj_consume_token(FCHAVES);
        jj_consume_token(PONTOVIRGULA);
                                                                                        {if (true) return new CIf(token.beginLine, exp, coms);}
        break;
      case WHILE:
        token = jj_consume_token(WHILE);
        exp = EXP();
        jj_consume_token(DO);
        jj_consume_token(ACHAVES);
        coms = SeqComandos();
        jj_consume_token(FCHAVES);
        jj_consume_token(PONTOVIRGULA);
                                                                                                {if (true) return new CWhile(token.beginLine, exp, coms);}
        break;
      default:
        jj_la1[9] = jj_gen;
        if (jj_2_4(3)) {
          token = jj_consume_token(ID);
          jj_consume_token(ATRIBUICAO);
          jj_consume_token(READIO);
          jj_consume_token(APAREN);
          jj_consume_token(FPAREN);
                                                                         {if (true) return new CReadInput(token.beginLine, token.image);}
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case RETURN:
            token = jj_consume_token(RETURN);
            exp = EXP();
            jj_consume_token(PONTOVIRGULA);
                                                   {if (true) return new CReturn(token.beginLine, exp);}
            break;
          case PRINTIO:
            token = jj_consume_token(PRINTIO);
            exp = EXP();
            jj_consume_token(PONTOVIRGULA);
                                                    {if (true) return new CPrint(token.beginLine, exp);}
            break;
          default:
            jj_la1[10] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_3R_11() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_scan_token(NUM)) return true;
    return false;
  }

  static private boolean jj_3R_8() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(ATRIBUICAO)) return true;
    if (jj_scan_token(READIO)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(APAREN)) return true;
    return false;
  }

  static private boolean jj_3R_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3R_8()) {
    jj_scanpos = xsp;
    if (jj_3R_9()) {
    jj_scanpos = xsp;
    if (jj_3R_10()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(APAREN)) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(ATRIBUICAO)) return true;
    if (jj_3R_4()) return true;
    return false;
  }

  static private boolean jj_3R_6() {
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3R_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_5()) {
    jj_scanpos = xsp;
    if (jj_3R_6()) return true;
    }
    return false;
  }

  static private boolean jj_3R_5() {
    if (jj_scan_token(APAREN)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public LugosiTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  /** Whether we are looking ahead. */
  static private boolean jj_lookingAhead = false;
  static private boolean jj_semLA;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[11];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80,0x720,0x36000,0x1800,0x7ff00000,0x0,0x80000,0x0,0x1800,0x30000,0x6000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x80,0xc0,0x0,0x8,0x0,0x8,0xc2,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[4];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Lugosi(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Lugosi(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new LugosiTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Lugosi(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new LugosiTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Lugosi(LugosiTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(LugosiTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[40];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 11; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 40; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 4; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
